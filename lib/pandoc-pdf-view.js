'use babel'

import PandocPdfProcessor from './pandoc-pdf-processor.js'
import { CompositeDisposable } from 'atom'
import electron from 'electron'
import os from 'os'


export default class PandocPdfView {
  
  
  // get PandocPdfView from active editor, or create one for it
  static async get(create) {
    // is there an active editor?
    const editor = atom.workspace.getActiveTextEditor()
    if (!editor) {
      // if not, nothing to do
      return undefined
    }
    // otherwise, is there a Pandoc/PDF view in the editor?
    var ppvElement = editor.element.querySelector('.pandoc-pdf-view')
    if (ppvElement) {
      // if yes, return its PandocPdfView
      return ppvElement.model
    }
    // otherwise, should we create it?
    if (!create) {
      // if not, nothing to do
      return undefined
    }
    // otherwise, let's create it
    // but that only works if there is a pathname attached to the editor
    // is there?
    if (editor.getPath()) {
      // if yes, create the PandocPdfView
      return new PandocPdfView(editor)
    }
    // otherwise, ask the user to save the editor
    pathname = await PandocPdfView.askSave(editor)
    // have they?
    if (pathname) {
      // if yes, create the PandocPdfView
      return new PandocPdfView(editor)
    }
    // otherwise, nothing to do
    return undefined
  }
  
  
  // ask the user to save the editor
  static async askSave(editor) {
    // determine default directory to save to
    let defaultPath = atom.project.getPaths()
    if (defaultPath.length > 0) {
      defaultPath = defaultPath[0]
    } else {
      defaultPath = os.homedir
    }
    // ask to choose a pathname
    pathname = await electron.remote.dialog.showSaveDialog(
      electron.remote.BrowserWindow.getFocusedWindow(), {
        'title': 'Save file for Pandoc/PDF',
        'defaultPath': defaultPath,
        'buttonLabel': 'Save'
      })
    // did they choose a pathname?
    if (pathname) {
      // if yes, save
      await editor.saveAs(pathname)
    }
    return pathname
  }
  

  // create PandocPdfView
  constructor(editor) {
    console.log('▶ PandocPdfView constructor')
view = this // HACK
    
    // collect disposables
    this.subscriptions = new CompositeDisposable()
    
    // remember the associated editor
    this.editor = editor
    
    // create Pandoc processor
    this.processor = new PandocPdfProcessor(editor.getPath(), this)
    
    // create HTML div for view
    this.element = document.createElement('div')
    this.element.classList.add('pandoc-pdf-view')
    this.element.innerHTML = `
      <span class="pandoc-pdf-heading inline-block-tight text-highlight">Pandoc/PDF</span>
      <span class="pandoc-pdf-spacer"></span>
      <span class="inline-block-tight btn icon icon-pandoc"
        data-id="process"
        title="Process with Pandoc into PDF"></span>
      <span class="inline-block-tight btn icon icon-file-pdf"
        data-id="save-pdf"
        title="Save Generated PDF"></span>
      <span class="pandoc-pdf-spacer"></span>
      <span class="inline-block-tight btn icon icon-three-bars"
        data-id="toggle-log"
        title="Toggle Pandoc Log Messages"></span>
      <span class="inline-block-tight btn icon"
        data-id="open-defaults"
        title="Open Source Defaults File in Atom">
        <span class="icon-2x2"">YA<br>ML</span>
      </span>
      <span class="pandoc-pdf-spacer"></span>
      <span class="inline-block-tight btn icon icon-file-directory"
        data-id="show-files"
        title="Show Intermediate Files Generated by Pandoc"></span>
      <span class="inline-block-tight btn icon icon-tools"
        data-id="show-settings"
        title="Show Pandoc/PDF Settings"></span>
      <span class="pandoc-pdf-spacer"></span>
      <span class="inline-block-tight btn icon icon-question"
        data-id="show-help"
        title="Show Help"></span>
      
      <span class="inline-block-tight pandoc-pdf-close icon icon-x"
        data-id="close-view"
        title="Close Pandoc/PDF Panel"></span>
      
      <div class="pandoc-pdf-dialog" style="display: none">
        <div>
          <span class="inline-block text-highlight">Pandoc/PDF Log</span>
          <span class="inline-block pandoc-pdf-close icon-x"
            data-id="hide-log"
            title="Hide Pandoc Log Messages"></span>
        </div>
        <div class="pandoc-pdf-log"
          data-id="log-text" >
        </div>
      </div>
    `
    // element references
    this.bSavePdf = this.element.querySelector('[data-id="save-pdf"]')
    this.bToggleLog = this.element.querySelector('[data-id="toggle-log"]')
    this.logText = this.element.querySelector('[data-id="log-text"]')
    
    // make this view object accessible from the HTML div
    this.element.model = this

    // add div as first child to editor
    this.editor.element.prepend(this.element)
    
    // fit the absolutely positioned div above the editor
    //   height of div
    const height = this.element.offsetHeight  // account for margin?
    //   make space for div through editor margin-top
    this.editor.element.style.marginTop = height + 'px'    
    //   move div into the space
    this.element.style.top = '-' + height + 'px'    
    
    // add function to buttons
    this.element.querySelector('[data-id="process"]').addEventListener(
      'click', (event) => this.process())
    this.bSavePdf.addEventListener('click', (event) => this.processor.savePDF())
    this.bToggleLog.addEventListener('click', (event) => this.showLog())
    this.element.querySelector('[data-id="open-defaults"]').addEventListener(
      'click', (event) => this.processor.openDefaults())
    this.element.querySelector('[data-id="show-files"]').addEventListener(
      'click', (event) => this.processor.showFiles())
    this.element.querySelector('[data-id="show-settings"]').addEventListener(
      'click', (event) => atom.workspace.open('atom://config/packages/pandoc-pdf'))
    this.element.querySelector('[data-id="show-help"]').addEventListener(
      'click', (event) => atom.workspace.open('markdown-preview://' +
        path.join(__dirname, '..', 'README.md'), {split: 'right',
        searchAllPanes: true, activatePane: false, activateItem: true}))
    this.element.querySelector('[data-id="close-view"]').addEventListener(
      'click', (event) => this.destroy())
    this.element.querySelector('[data-id="hide-log"]').addEventListener(
      'click', (event) => this.showLog(false))
    console.log('◀ PandocPdfView constructor')
  }
  
  
  // destroy PandocPdfView
  destroy() {
    console.log('▶ PandocPdfView destroy')
    
    // remove event listeners?
    this.editor.element.style.marginTop = '0px'
    this.editor.element.removeChild(this.element)
    this.element.model = null
    this.element = null
    this.processor.destroy()
    this.editor = null
    this.subscriptions.dispose()
    
    console.log('◀ PandocPdfView destroy')
  }
  
  
  // **************************************************************************


  // process with Pandoc into PDF
  async process() {
    console.log('▶ PandocPdfView process')
    
    await this.editor.save()
    this.bSavePdf.classList.add('disabled')
    this.clearLog()
    this.processor.start()

    console.log('◀ PandocPdfView process')
  }
  

  // show or hide Pandoc/PDF Log
  showLog(show) {
    console.log('▶ PandocPdfView showLog')
    
    // called without argument? → toggle
    const ppd = this.element.querySelector('.pandoc-pdf-dialog')
    if (show === undefined) {
      show = (ppd.style.display == 'none')
    }
    // set 'display' property of dialog according to show
    ppd.style.display = show ? 'block' : 'none'
    // add/remove 'selected' class to button according to show
    if (show) {
      this.bToggleLog.classList.add('selected')
    } else {
      this.bToggleLog.classList.remove('selected')
    }
    
    console.log('◀ PandocPdfView showLog')
  }

  
  // remove all messages from log
  clearLog() {
    while (this.logText.lastChild) {
      this.logText.removeChild(this.logText.lastChild)
    }
  }
  
  
  // write to Pandoc/PDF Log
  writeLog(output, type) {
    // split buffered lines
    lines = output.split('\n')
    for (let line of lines) {
      // make line/column specification into links
      line = line.replace(/(line (\d+) column (\d+))/g,
        '<a href="#" data-line="$2" data-column="$3">$1</a>')
      
      // add output line element
      const linediv = document.createElement('p')
      linediv.innerHTML = line
      linediv.classList.add(type)
      this.logText.appendChild(linediv)
      
      // mark Pandoc & pandoc-citeproc warnings
      if (line.startsWith('[WARNING]') ||
        line.startsWith('pandoc-citeproc:')) {
          linediv.classList.add('warning')
          this.bToggleLog.classList.add('warning')
      }
      
      // make links work
      const links = linediv.getElementsByTagName('a')
      for (let link of links) {
        link.onclick = (event) => this.handleClick(event)
        // FIXME use addEventListener instead?
      }
    }
  }
  
  
  // called from PandocPdfProcessor
  
  
  // log Pandoc call
  logCall(args) {
    // in bash-compatible & readable form
    // bash-compatible: escape spaces (other characters?)
    // readable: don't break within an argument (<nobr>)
    args = args.map(arg => '<nobr>' + arg.replace(/ /g, '\\ ') + '</nobr>')
    this.writeLog(args.join(' '), 'command')
  }
  
  
  // log Pandoc output
  logStdout(output) {
    this.writeLog(output, 'stdout')
  }
  
  
  // log Pandoc error output
  logStderr(output) {
    this.writeLog(output, 'stderr')
  }
  
  
  // log Pandoc exit status
  logExit(code) {
    this.writeLog('Pandoc exit code: ' + code, code ? 'failure' : 'success')
    if (code == 0) {
      this.bSavePdf.classList.remove('disabled')
    } else {
      this.showLog(true)
    }
  }
  
  
}
