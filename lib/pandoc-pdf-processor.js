'use babel'

import path from 'path'
import temp from 'temp'
import electron from 'electron'
import fse from 'fs-extra'



export default class PandocPdfProcessor {
  
  constructor(pathname) {
    console.log('▶ PandocPdfViewProcessor constructor')
processor = this  // HACK
    
    // set input pathname
    this.pathname = pathname
    
    // create temporary directory for Pandoc
    temp.track()
    this.temp = temp.mkdirSync()
    
    // parse pathname into parts
    this.parts = path.parse(this.pathname)
    // set pdf pathname
    this.pdfname = path.join(this.temp, this.parts.name + '.pdf')
    // set pathname for pdf save
    this.savename = path.join(this.parts.dir, this.parts.name + '.pdf')
    // set pathname for source defaults file
    this.defaults = path.join(this.parts.dir, this.parts.name + '.yaml')

    // construct BufferedProcess options for Pandoc
    this.options = {}
    // make resources (image files etc.) from the original directory available
    // by using it as Pandoc working directory
    this.options.cwd = this.parts.dir
    // copy environment
    this.options.env = {};
    for (e in process.env) {
      this.options.env[e] = process.env[e];
    }
    // SOURCE_DATE_EPOCH (in Unix time format) determines the time that enters
    // the PDF ID generated by *latex, which in turn is used by the pdf.js
    // viewer as a key for storing the scroll position. Keeping this environment
    // variable constant over *latex invocations is necessary to prevent the
    // scroll position to be reset. We here use the time of the creation of the
    // PandocPdfProcessor.
    this.options.env.SOURCE_DATE_EPOCH=Math.floor(Date.now() / 1000).toString()

    console.log('◀ PandocPdfViewProcessor constructor')
  }
  
  
  destroy() {
    console.log('▶ PandocPdfViewProcessor destroy')
    
    temp.cleanupSync()
    
    console.log('◀ PandocPdfViewProcessor destroy')
  }
  
  
  // open source defaults file in an Atom editor
  openDefaults() {
    atom.workspace.open(this.defaults)
  }
  
  
  // show temporary files in external file manager
  showFiles() {
    electron.shell.openItem(this.temp)
  }
  
  
  // copy generated PDF to user selected location
  async savePDF() {
    // offer to save with current savename
    result = await electron.remote.dialog.showSaveDialog(
      electron.remote.BrowserWindow.getFocusedWindow(), {
        "title": "Save PDF",
        "defaultPath": this.savename,
        "buttonLabel": "Save"
      })
    // if pathname selected or accepted
    if (result) {
      // set (new) savename
      this.savename = result
      // save PDF, i.e. copy to destination
      fse.copySync(this.pdfname, this.savename)
    }
  }
  
  
  // run Pandoc on file
  start() {
    
  }
  
}
